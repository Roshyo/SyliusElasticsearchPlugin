<?php

declare(strict_types=1);

namespace Setono\SyliusElasticsearchPlugin\Command;

use Sylius\Component\Channel\Repository\ChannelRepositoryInterface;
use Sylius\Component\Core\Model\ChannelInterface;
use Sylius\Component\Locale\Model\LocaleInterface;
use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Yaml\Yaml;


class SyncElasticCommand extends ContainerAwareCommand
{
    /** @var SymfonyStyle */
    protected $io;

    /** @var ChannelRepositoryInterface */
    protected $channelRepository;

    /** @var array */
    protected $config = [];

    /**
     * SyncElasticCommand constructor.
     * @param ChannelRepositoryInterface $channelRepository
     */
    public function __construct(ChannelRepositoryInterface $channelRepository)
    {
        parent::__construct();

        $this->channelRepository = $channelRepository;
    }

    /**
     * @inheritdoc
     */
    protected function configure()
    {
        $this
            ->setName('setono:elastic-search:generate-config')
            ->setDescription('This command generate a new config file with Elastic Search indexes for products and taxon for every channel.');
    }

    /**
     * @inheritdoc
     */
    protected function initialize(InputInterface $input, OutputInterface $output): void
    {
        $this->io = new SymfonyStyle($input, $output);

        $application = $this->getApplication();
        $application->setCatchExceptions(false);
    }

    /**
     * @inheritdoc
     */
    protected function execute(InputInterface $input, OutputInterface $output): void
    {
        if(!$this->io->confirm('Please notice this command will delete and create a new "fos_elastica.yaml" file for you. Want to continue?', false)) {
            exit;
        }

        $this->config = [
            'fos_elastica' => [
                'clients' => [],
                'indexes' => []
            ],
            'setono_sylius_elasticsearch' => [
                'attributes' => [],
                'finder_indexes' => [],
                'index_configs' => []
            ]
        ];

        $this->makeClient();
        $this->makeProductIndexes();
        $this->makeTaxonIndexes();
        $this->makeAttributes();
        $this->makeFinderIndexes();
        $this->saveConfigFiles();
    }

    protected function saveConfigFiles()
    {
        $projectRoot = $this->getContainer()->getParameter('kernel.project_dir');
        $fosElasticaYamlFilePath = "{$projectRoot}/config/packages/fos_elastica.yaml";
        $syliusElasticsearchYamlFilePath = "{$projectRoot}/config/packages/setono_sylius_elasticsearch.yaml";

        // fos elastica
        $content = "#This file was autogenerated\n";
        $content .= Yaml::dump(['fos_elastica' => $this->config['fos_elastica']], 100);
        file_put_contents($fosElasticaYamlFilePath, $content);
        $this->io->success("Generated new config file: {$fosElasticaYamlFilePath}");

        // setono sylius elasticsearch
        $content = "#This file was autogenerated\n";
        $content .= Yaml::dump(['setono_sylius_elasticsearch' => $this->config['setono_sylius_elasticsearch']], 100);
        file_put_contents($syliusElasticsearchYamlFilePath, $content);
        $this->io->success("Generated new config file: {$syliusElasticsearchYamlFilePath}");

        $this->io->success("You can now run \"fos:elastica:populate\".");
    }

    /**
     * Yields localized channel codes
     *
     * @return \Generator
     */
    protected function getLocaleChannels()
    {
        /** @var ChannelInterface $channel */
        foreach($this->channelRepository->findAll() as $channel) {
            /** @var LocaleInterface $locale */
            foreach($channel->getLocales() as $locale) {
                yield strtolower("{$channel->getCode()}_{$locale->getCode()}");
            }
        }
    }

    /**
     * Dialog for setting op client connection
     */
    protected function makeClient()
    {
        $this->config['fos_elastica']['clients']['default'] = [
            'host' => $this->io->ask('Client hostname'),
            'port' => intval($this->io->ask('Client port'))
        ];
    }

    /**
     * Makes settings for elastic search index
     *
     * @return array
     */
    protected function makeSettings()
    {
        return [
            'analysis' => [
                'char_filter' => [
                    'dash_and_hyphens' => [
                        'type' => 'mapping',
                        'mappings' => ['-=>']
                    ]
                ],
                'filter' => [
                    'ngram' => [
                        'type' => 'ngram',
                        'min_gram' => 3,
                        'max_gram' => 3,
                        'token_chars' => [
                            'letter',
                            'digit'
                        ]
                    ]
                ],
                'analyzer' => [
                    'autocomplete' => [
                        'type' => 'custom',
                        'tokenizer' => 'standard',
                        'char_filter' => 'dash_and_hyphens',
                        'filter' => [
                            'ngram',
                            'lowercase',
                            'asciifolding',
                            'trim'
                        ]
                    ]
                ]
            ]
        ];
    }

    /**
     * Makes indexes for products for every localized channel
     */
    protected function makeProductIndexes()
    {
        foreach($this->getLocaleChannels() as $localeChannelCode) {
            $indexName = $localeChannelCode . '_products';
            $this->config['fos_elastica']['indexes'][$indexName] = [
                'settings' => $this->makeSettings(),
                'types' => [
                    'default' => [
                        'properties' => [
                            'description' => [
                                'type' => 'text',
                                'analyzer' => 'autocomplete'
                            ],
                            'shortDescription' => [
                                'type' => 'text',
                                'analyzer' => 'autocomplete'
                            ],
                            'metaKeywords' => [
                                'type' => 'text',
                                'analyzer' => 'autocomplete'
                            ],
                            'metaDescription' => [
                                'type' => 'text',
                                'analyzer' => 'autocomplete'
                            ],
                            'createdAt' => [
                                'type' => 'date'
                            ],
                            'name' => [
                                'type' => 'text',
                                'boost' => 2,
                                'fields' => [
                                    'keyword' => [
                                        'type' => 'keyword'
                                    ]
                                ]
                            ]
                        ],
                        'persistence' => [
                            'driver' => 'orm',
                            'model' =>'%sylius.model.product.class%',
                            'provider' => [
                                'query_builder_method' => 'createEnabledProductQueryBuilder'
                            ],
                            'listener' => [
                                'enabled' => false
                            ],
                            'elastica_to_model_transformer' => [
                                'ignore_missing' => true
                            ]
                        ]
                    ]
                ]
            ];
            $this->config['setono_sylius_elasticsearch']['index_configs'][] = [
                'index_name' => $indexName,
                'type_name' => 'default',
                'model_class' => '%sylius.model.product.class%'
            ];
        }
    }

    /**
     * Makes indexes for taxons for every localized channel
     */
    protected function makeTaxonIndexes()
    {
        foreach($this->getLocaleChannels() as $localeChannelCode) {
            $indexName = $localeChannelCode . '_taxons';
            $this->config['fos_elastica']['indexes'][$indexName] = [
                'settings' => $this->makeSettings(),
                'types' => [
                    'default' => [
                        'properties' => [
                            'description' => [
                                'type' => 'text',
                                'analyzer' => 'autocomplete'
                            ],
                            'name' => [
                                'type' => 'text',
                                'fields' => [
                                    'keyword' => [
                                        'type' => 'keyword'
                                    ]
                                ]
                            ],
                            'slug' =>  null
                        ],
                        'persistence' => [
                            'driver' => 'orm',
                            'model' =>'%sylius.model.product.class%',
                            'provider' => [
                                'query_builder_method' => 'createEnabledProductQueryBuilder'
                            ],
                            'listener' => [
                                'enabled' => false
                            ],
                            'elastica_to_model_transformer' => [
                                'ignore_missing' => true
                            ]
                        ]
                    ]
                ]
            ];
            $this->config['setono_sylius_elasticsearch']['index_configs'][] = [
                'index_name' => $indexName,
                'type_name' => 'default',
                'model_class' => '%sylius.model.taxon.class%'
            ];
        }
    }


    /**
     * Dialog for defining product attributes
     */
    protected function makeAttributes()
    {
        while(true) {
            $attributeName = $this->io->ask('Do you want to add a product attribute? Leave empty to move on.');
            if($attributeName) {
                $this->config['setono_sylius_elasticsearch']['attributes'][] = $attributeName;
            } else {
                break;
            }
        }
    }

    /**
     * Defines indexes for the elastic search finders
     */
    protected function makeFinderIndexes()
    {
        foreach($this->getLocaleChannels() as $localeChannelCode) {
            $this->config['setono_sylius_elasticsearch']['finder_indexes'][$localeChannelCode]['products'] = "{$localeChannelCode}_products";
            $this->config['setono_sylius_elasticsearch']['finder_indexes'][$localeChannelCode]['taxons'] = "{$localeChannelCode}_taxons";
        }
    }
}
