<?php

declare(strict_types=1);

namespace Setono\SyliusElasticsearchPlugin\Command;

use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Yaml\Yaml;

class SyncElasticCommand extends ContainerAwareCommand
{
    /** @var SymfonyStyle */
    protected $io;

    /** @var array */
    protected $config = [];

    /**
     * {@inheritdoc}
     */
    protected function configure()
    {
        $this
            ->setName('setono:elastic-search:generate-config')
            ->setDescription('This command generate a new config file with Elastic Search indexes for products and taxon for every channel.');
    }

    /**
     * {@inheritdoc}
     */
    protected function initialize(InputInterface $input, OutputInterface $output): void
    {
        $this->io = new SymfonyStyle($input, $output);

        $application = $this->getApplication();
        $application->setCatchExceptions(false);
    }

    /**
     * {@inheritdoc}
     */
    protected function execute(InputInterface $input, OutputInterface $output): void
    {
        if (!$this->io->confirm('Please notice this command will delete and create a new "fos_elastica.yaml" and "setono_sylius_elasticsearch.yaml" file for you. Want to continue?', false)) {
            exit;
        }

        $this->config = [
            'fos_elastica' => [
                'clients' => [],
                'indexes' => [],
            ],
            'setono_sylius_elasticsearch' => [
                'index_configs' => [],
            ],
        ];

        $this->makeClient();
        $this->makeProductIndexes();
        $this->makeTaxonIndexes();
        $this->saveConfigFiles();
    }

    protected function saveConfigFiles()
    {
        $projectRoot = $this->getContainer()->getParameter('kernel.project_dir');
        $fosElasticaYamlFilePath = "{$projectRoot}/config/packages/fos_elastica.yaml";
        $syliusElasticsearchYamlFilePath = "{$projectRoot}/config/packages/setono_sylius_elasticsearch.yaml";

        // fos elastica
        $content = "#This file was autogenerated\n";
        $content .= Yaml::dump(['fos_elastica' => $this->config['fos_elastica']], 100);
        file_put_contents($fosElasticaYamlFilePath, $content);
        $this->io->success("Generated new config file: {$fosElasticaYamlFilePath}");

        // setono sylius elasticsearch
        $content = "#This file was autogenerated\n";
        $content .= Yaml::dump(['setono_sylius_elasticsearch' => $this->config['setono_sylius_elasticsearch']], 100);
        file_put_contents($syliusElasticsearchYamlFilePath, $content);
        $this->io->success("Generated new config file: {$syliusElasticsearchYamlFilePath}");

        $this->io->success('You can now run "fos:elastica:populate".');
    }

    /**
     * Dialog for setting op client connection
     */
    protected function makeClient()
    {
        $this->config['fos_elastica']['clients']['default'] = [
            'host' => $this->io->ask('Client hostname', 'elasticsearch'),
            'port' => (int) ($this->io->ask('Client port', '9200')),
        ];
    }

    /**
     * Makes settings for elastic search index
     *
     * @return array
     */
    protected function makeSettings()
    {
        return [
            'mapping' => [
                'total_fields' => [
                    'limit' => 10000,
                ],
            ],
            'analysis' => [
                'analyzer' => [
                    'code_analyzer' => [
                        'type' => 'custom',
                        'tokenizer' => 'whitespace',
                        'filter' => [
                            'asciifolding',
                            'trim',
                        ],
                    ],
                ],
            ],
        ];
    }

    /**
     * Makes indexes for products for every localized channel
     */
    protected function makeProductIndexes()
    {
        $this->config['fos_elastica']['indexes']['products'] = [
            'settings' => $this->makeSettings(),
            'types' => [
                'default' => [
                    'properties' => [
                        'channels' => [
                            'analyzer' => 'code_analyzer',
                        ],
                        'brand' => [
                            'type' => 'nested',
                            'properties' => [
                                'code' => [
                                    'type' => 'text',
                                    'analyzer' => 'code_analyzer',
                                ],
                                'name' => [
                                    'type' => 'keyword',
                                ],
                            ],
                        ],
                        'options' => [
                            'type' => 'nested',
                            'properties' => [
                                'code' => [
                                    'type' => 'text',
                                    'analyzer' => 'code_analyzer',
                                    'fielddata' => true,
                                ],
                                'value' => [
                                    'type' => 'nested',
                                    'properties' => [
                                        'code' => [
                                            'type' => 'text',
                                            'analyzer' => 'code_analyzer',
                                            'fielddata' => true,
                                        ],
                                        'locale' => [
                                            'type' => 'text',
                                            'analyzer' => 'code_analyzer',
                                        ],
                                        'name' => [
                                            'type' => 'keyword',
                                        ],
                                    ],
                                ],
                            ],
                        ],
                        'attributes' => [
                            'type' => 'nested',
                            'properties' => [
                                'code' => [
                                    'type' => 'text',
                                    'analyzer' => 'code_analyzer',
                                    'fielddata' => true,
                                ],
                                'locale' => [
                                    'type' => 'text',
                                    'analyzer' => 'code_analyzer',
                                ],
                                'values' => [
                                    'type' => 'nested',
                                    'properties' => [
                                        'code' => [
                                            'type' => 'text',
                                            'analyzer' => 'code_analyzer',
                                            'fielddata' => true,
                                        ],
                                        'locale' => [
                                            'type' => 'text',
                                            'analyzer' => 'code_analyzer',
                                        ],
                                        'name' => [
                                            'type' => 'keyword',
                                        ],
                                    ],
                                ],
                            ],
                        ],
                        'prices' => [
                            'type' => 'nested',
                            'properties' => [
                                'channel' => [
                                    'type' => 'text',
                                    'analyzer' => 'code_analyzer',
                                ],
                                'price' => [
                                    'type' => 'integer',
                                ],
                            ],
                        ],
                    ],
                    'persistence' => [
                        'driver' => 'orm',
                        'model' => '%sylius.model.product.class%',
                        'provider' => [
                            'query_builder_method' => 'createEnabledProductQueryBuilder',
                        ],
                        'listener' => [
                            'enabled' => false,
                        ],
                        'elastica_to_model_transformer' => [
                            'ignore_missing' => true,
                        ],
                        'model_to_elastica_transformer' => [
                            'service' => 'setono_sylius_elasticsearch_plugin.transformer.product_transformer',
                        ],
                    ],
                ],
            ],
        ];
        $this->config['setono_sylius_elasticsearch']['index_configs']['products'] = [
            'type_name' => 'default',
            'model_class' => '%sylius.model.product.class%',
        ];
    }

    /**
     * Makes indexes for taxons for every localized channel
     */
    protected function makeTaxonIndexes()
    {
        $this->config['fos_elastica']['indexes']['taxons'] = [
            'settings' => $this->makeSettings(),
            'types' => [
                'default' => [
                    'properties' => [
                        'description' => [
                            'type' => 'text',
                        ],
                        'name' => [
                            'type' => 'text',
                            'fields' => [
                                'keyword' => [
                                    'type' => 'keyword',
                                ],
                            ],
                        ],
                        'slug' => null,
                    ],
                    'persistence' => [
                        'driver' => 'orm',
                        'model' => '%sylius.model.taxon.class%',
                        'listener' => [
                            'enabled' => false,
                        ],
                        'elastica_to_model_transformer' => [
                            'ignore_missing' => true,
                        ],
                    ],
                ],
            ],
        ];
        $this->config['setono_sylius_elasticsearch']['index_configs']['taxons'] = [
            'type_name' => 'default',
            'model_class' => '%sylius.model.taxon.class%',
        ];
    }
}
